{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(RegisterDocument, options);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\nexport function useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\nexport const ProjectsDocument = gql`\n    query Projects {\n  projects {\n    description\n    id\n    tickets {\n      id\n      projectId\n    }\n    users {\n      id\n      username\n    }\n  }\n}\n    `;\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useProjectsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectsDocument, options);\n}\nexport function useProjectsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectsDocument, options);\n}","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","RegularErrorFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","LoginDocument","useLoginMutation","baseOptions","options","useMutation","RegisterDocument","useRegisterMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","ProjectsDocument","useProjectsQuery","useProjectsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  createProject: Project;\n  deleteProject: Scalars['Boolean'];\n  updateProject: Project;\n  createTicket?: Maybe<Ticket>;\n  deleteTicket: Scalars['Boolean'];\n  updateTicket: Ticket;\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateProjectArgs = {\n  options: ProjectInput;\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationUpdateProjectArgs = {\n  options: ProjectInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  projectId: Scalars['Int'];\n  options: TicketInput;\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationUpdateTicketArgs = {\n  options: TicketInput;\n  id: Scalars['Int'];\n};\n\nexport type Project = {\n  __typename?: 'Project';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Array<User>;\n  tickets: Array<Ticket>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type ProjectInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  projects: Array<Project>;\n  project: Project;\n  tickets: Array<Ticket>;\n};\n\n\nexport type QueryProjectArgs = {\n  id: Scalars['Float'];\n};\n\nexport type Ticket = {\n  __typename?: 'Ticket';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  status: Scalars['String'];\n  priority: Scalars['String'];\n  projectId: Scalars['Float'];\n  project: Project;\n  users: Array<User>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type TicketInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n  status: Scalars['String'];\n  priority: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  projects?: Maybe<Array<Project>>;\n  tickets?: Maybe<Array<Ticket>>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username'>\n    & { tickets?: Maybe<Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'title' | 'description' | 'status' | 'priority'>\n    )>>, projects?: Maybe<Array<(\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'title' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type ProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProjectsQuery = (\n  { __typename?: 'Query' }\n  & { projects: Array<(\n    { __typename?: 'Project' }\n    & Pick<Project, 'description' | 'id'>\n    & { tickets: Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'projectId'>\n    )>, users: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    )> }\n  )> }\n);\n\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const ProjectsDocument = gql`\n    query Projects {\n  projects {\n    description\n    id\n    tickets {\n      id\n      projectId\n    }\n    users {\n      id\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProjectsQuery(baseOptions?: Apollo.QueryHookOptions<ProjectsQuery, ProjectsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProjectsQuery, ProjectsQueryVariables>(ProjectsDocument, options);\n      }\nexport function useProjectsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectsQuery, ProjectsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProjectsQuery, ProjectsQueryVariables>(ProjectsDocument, options);\n        }\nexport type ProjectsQueryHookResult = ReturnType<typeof useProjectsQuery>;\nexport type ProjectsLazyQueryHookResult = ReturnType<typeof useProjectsLazyQuery>;\nexport type ProjectsQueryResult = Apollo.QueryResult<ProjectsQuery, ProjectsQueryVariables>;"]},"metadata":{},"sourceType":"module"}