{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n  tickets {\n    id\n    title\n    description\n    status\n    priority\n  }\n  projects {\n    id\n    title\n    description\n  }\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($options: CommentInput!, $ticketId: Int!) {\n  createComment(options: $options, ticketId: $ticketId) {\n    text\n    user {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      options: // value for 'options'\n *      ticketId: // value for 'ticketId'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateCommentDocument, options);\n}\nexport const CreateProjectDocument = gql`\n    mutation CreateProject($options: ProjectInput!) {\n  createProject(options: $options) {\n    id\n  }\n}\n    `;\n\n/**\n * __useCreateProjectMutation__\n *\n * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateProjectMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateProjectDocument, options);\n}\nexport const CreateTicketDocument = gql`\n    mutation CreateTicket($options: TicketInput!, $projectId: Int!) {\n  createTicket(options: $options, projectId: $projectId) {\n    id\n  }\n}\n    `;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTicketDocument, options);\n}\nexport const DeleteProjectDocument = gql`\n    mutation DeleteProject($id: Int!) {\n  deleteProject(id: $id)\n}\n    `;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteProjectDocument, options);\n}\nexport const DeleteTicketDocument = gql`\n    mutation DeleteTicket($id: Int!) {\n  deleteTicket(id: $id)\n}\n    `;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteTicketDocument, options);\n}\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LogoutDocument, options);\n}\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(RegisterDocument, options);\n}\nexport const UpdateProjectDocument = gql`\n    mutation UpdateProject($options: ProjectInput!, $id: Int!) {\n  updateProject(options: $options, id: $id) {\n    id\n  }\n}\n    `;\n\n/**\n * __useUpdateProjectMutation__\n *\n * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateProjectMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateProjectDocument, options);\n}\nexport const UpdateTicketDocument = gql`\n    mutation UpdateTicket($options: TicketInput!, $id: Int!) {\n  updateTicket(options: $options, id: $id) {\n    id\n  }\n}\n    `;\n\n/**\n * __useUpdateTicketMutation__\n *\n * To run a mutation, you first call `useUpdateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTicketMutation, { data, loading, error }] = useUpdateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateTicketMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateTicketDocument, options);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\nexport function useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\nexport const ProjectDocument = gql`\n    query Project($id: Int!) {\n  project(id: $id) {\n    title\n    id\n    description\n    tickets {\n      id\n      priority\n      title\n      status\n      description\n      users {\n        username\n      }\n    }\n    users {\n      id\n      username\n      email\n    }\n  }\n}\n    `;\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useProjectQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectDocument, options);\n}\nexport function useProjectLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectDocument, options);\n}\nexport const ProjectsDocument = gql`\n    query Projects {\n  projects {\n    description\n    id\n    tickets {\n      id\n      projectId\n    }\n    users {\n      id\n      username\n    }\n  }\n}\n    `;\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useProjectsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectsDocument, options);\n}\nexport function useProjectsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectsDocument, options);\n}\nexport const TicketDocument = gql`\n    query Ticket($id: Int!) {\n  ticket(id: $id) {\n    id\n    title\n    status\n    description\n    priority\n    createdAt\n    updatedAt\n    project {\n      title\n    }\n    users {\n      username\n    }\n    comments {\n      text\n      user {\n        username\n      }\n    }\n  }\n}\n    `;\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useTicketQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(TicketDocument, options);\n}\nexport function useTicketLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(TicketDocument, options);\n}","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","RegularErrorFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","CreateCommentDocument","useCreateCommentMutation","baseOptions","options","useMutation","CreateProjectDocument","useCreateProjectMutation","CreateTicketDocument","useCreateTicketMutation","DeleteProjectDocument","useDeleteProjectMutation","DeleteTicketDocument","useDeleteTicketMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","UpdateProjectDocument","useUpdateProjectMutation","UpdateTicketDocument","useUpdateTicketMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","ProjectDocument","useProjectQuery","useProjectLazyQuery","ProjectsDocument","useProjectsQuery","useProjectsLazyQuery","TicketDocument","useTicketQuery","useTicketLazyQuery"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AAmaA,OAAO,MAAMC,uBAAuB,GAAGH,GAAI;AAC3C;AACA;AACA;AACA;AACA,KALO;AAMP,OAAO,MAAMI,sBAAsB,GAAGJ,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBO;AAkBP,OAAO,MAAMK,8BAA8B,GAAGL,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,uBAAwB;AAC9B,EAAEC,sBAAuB,EAVlB;AAWP,OAAO,MAAME,qBAAqB,GAAGN,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KATO;;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,wBAAT,CAAkCC,WAAlC,EAAmI;AAClI,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAA0EJ,qBAA1E,EAAiGG,OAAjG,CAAP;AACD;AAIP,OAAO,MAAME,qBAAqB,GAAGX,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,KANO;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,wBAAT,CAAkCJ,WAAlC,EAAmI;AAClI,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAA0EC,qBAA1E,EAAiGF,OAAjG,CAAP;AACD;AAIP,OAAO,MAAMI,oBAAoB,GAAGb,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA,KANO;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnBO;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8B,UAAT,CAAoBtB,WAApB,EAAsF;AACrF,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,QAAP,CAA2CF,UAA3C,EAAuDpB,OAAvD,CAAP;AACD;AACP,OAAO,SAASuB,cAAT,CAAwBxB,WAAxB,EAA8F;AAC3F,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgC,YAAP,CAA+CJ,UAA/C,EAA2DpB,OAA3D,CAAP;AACD;AAIT,OAAO,MAAMyB,eAAe,GAAGlC,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAvBO;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmC,eAAT,CAAyB3B,WAAzB,EAAoG;AACnG,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,QAAP,CAAqDG,eAArD,EAAsEzB,OAAtE,CAAP;AACD;AACP,OAAO,SAAS2B,mBAAT,CAA6B5B,WAA7B,EAA6G;AAC1G,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgC,YAAP,CAAyDC,eAAzD,EAA0EzB,OAA1E,CAAP;AACD;AAIT,OAAO,MAAM4B,gBAAgB,GAAGrC,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfO;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsC,gBAAT,CAA0B9B,WAA1B,EAAwG;AACvG,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,QAAP,CAAuDM,gBAAvD,EAAyE5B,OAAzE,CAAP;AACD;AACP,OAAO,SAAS8B,oBAAT,CAA8B/B,WAA9B,EAAgH;AAC7G,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgC,YAAP,CAA2DI,gBAA3D,EAA6E5B,OAA7E,CAAP;AACD;AAIT,OAAO,MAAM+B,cAAc,GAAGxC,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxBO;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyC,cAAT,CAAwBjC,WAAxB,EAAiG;AAChG,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,QAAP,CAAmDS,cAAnD,EAAmE/B,OAAnE,CAAP;AACD;AACP,OAAO,SAASiC,kBAAT,CAA4BlC,WAA5B,EAA0G;AACvG,QAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgC,YAAP,CAAuDO,cAAvD,EAAuE/B,OAAvE,CAAP;AACD","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Comment = {\n  __typename?: 'Comment';\n  id: Scalars['Float'];\n  text: Scalars['String'];\n  ticketId: Scalars['Float'];\n  userId: Scalars['Float'];\n  ticket: Ticket;\n  user: User;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type CommentInput = {\n  text: Scalars['String'];\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  createProject: Project;\n  deleteProject: Scalars['Boolean'];\n  updateProject: Project;\n  createTicket?: Maybe<Ticket>;\n  deleteTicket: Scalars['Boolean'];\n  updateTicket: Ticket;\n  createComment: Comment;\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateProjectArgs = {\n  options: ProjectInput;\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationUpdateProjectArgs = {\n  options: ProjectInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  projectId: Scalars['Int'];\n  options: TicketInput;\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationUpdateTicketArgs = {\n  options: TicketInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateCommentArgs = {\n  ticketId: Scalars['Int'];\n  options: CommentInput;\n};\n\nexport type Project = {\n  __typename?: 'Project';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Array<User>;\n  tickets: Array<Ticket>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type ProjectInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  projects: Array<Project>;\n  project: Project;\n  ticket: Ticket;\n  tickets: Array<Ticket>;\n};\n\n\nexport type QueryProjectArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryTicketArgs = {\n  id: Scalars['Int'];\n};\n\nexport type Ticket = {\n  __typename?: 'Ticket';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  status: Scalars['String'];\n  priority: Scalars['String'];\n  projectId: Scalars['Float'];\n  project: Project;\n  users: Array<User>;\n  comments: Array<Comment>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type TicketInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n  status: Scalars['String'];\n  priority: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  projects?: Maybe<Array<Project>>;\n  tickets?: Maybe<Array<Ticket>>;\n  comments: Array<Comment>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n  & { tickets?: Maybe<Array<(\n    { __typename?: 'Ticket' }\n    & Pick<Ticket, 'id' | 'title' | 'description' | 'status' | 'priority'>\n  )>>, projects?: Maybe<Array<(\n    { __typename?: 'Project' }\n    & Pick<Project, 'id' | 'title' | 'description'>\n  )>> }\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type CreateCommentMutationVariables = Exact<{\n  options: CommentInput;\n  ticketId: Scalars['Int'];\n}>;\n\n\nexport type CreateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & { createComment: (\n    { __typename?: 'Comment' }\n    & Pick<Comment, 'text'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    ) }\n  ) }\n);\n\nexport type CreateProjectMutationVariables = Exact<{\n  options: ProjectInput;\n}>;\n\n\nexport type CreateProjectMutation = (\n  { __typename?: 'Mutation' }\n  & { createProject: (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) }\n);\n\nexport type CreateTicketMutationVariables = Exact<{\n  options: TicketInput;\n  projectId: Scalars['Int'];\n}>;\n\n\nexport type CreateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & { createTicket?: Maybe<(\n    { __typename?: 'Ticket' }\n    & Pick<Ticket, 'id'>\n  )> }\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProject'>\n);\n\nexport type DeleteTicketMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteTicketMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTicket'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type UpdateProjectMutationVariables = Exact<{\n  options: ProjectInput;\n  id: Scalars['Int'];\n}>;\n\n\nexport type UpdateProjectMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProject: (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) }\n);\n\nexport type UpdateTicketMutationVariables = Exact<{\n  options: TicketInput;\n  id: Scalars['Int'];\n}>;\n\n\nexport type UpdateTicketMutation = (\n  { __typename?: 'Mutation' }\n  & { updateTicket: (\n    { __typename?: 'Ticket' }\n    & Pick<Ticket, 'id'>\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username'>\n    & { tickets?: Maybe<Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'title' | 'description' | 'status' | 'priority'>\n    )>>, projects?: Maybe<Array<(\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'title' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type ProjectQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type ProjectQuery = (\n  { __typename?: 'Query' }\n  & { project: (\n    { __typename?: 'Project' }\n    & Pick<Project, 'title' | 'id' | 'description'>\n    & { tickets: Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'priority' | 'title' | 'status' | 'description'>\n      & { users: Array<(\n        { __typename?: 'User' }\n        & Pick<User, 'username'>\n      )> }\n    )>, users: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username' | 'email'>\n    )> }\n  ) }\n);\n\nexport type ProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProjectsQuery = (\n  { __typename?: 'Query' }\n  & { projects: Array<(\n    { __typename?: 'Project' }\n    & Pick<Project, 'description' | 'id'>\n    & { tickets: Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'projectId'>\n    )>, users: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    )> }\n  )> }\n);\n\nexport type TicketQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type TicketQuery = (\n  { __typename?: 'Query' }\n  & { ticket: (\n    { __typename?: 'Ticket' }\n    & Pick<Ticket, 'id' | 'title' | 'status' | 'description' | 'priority' | 'createdAt' | 'updatedAt'>\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'title'>\n    ), users: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    )>, comments: Array<(\n      { __typename?: 'Comment' }\n      & Pick<Comment, 'text'>\n      & { user: (\n        { __typename?: 'User' }\n        & Pick<User, 'username'>\n      ) }\n    )> }\n  ) }\n);\n\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n  tickets {\n    id\n    title\n    description\n    status\n    priority\n  }\n  projects {\n    id\n    title\n    description\n  }\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($options: CommentInput!, $ticketId: Int!) {\n  createComment(options: $options, ticketId: $ticketId) {\n    text\n    user {\n      username\n    }\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      options: // value for 'options'\n *      ticketId: // value for 'ticketId'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const CreateProjectDocument = gql`\n    mutation CreateProject($options: ProjectInput!) {\n  createProject(options: $options) {\n    id\n  }\n}\n    `;\nexport type CreateProjectMutationFn = Apollo.MutationFunction<CreateProjectMutation, CreateProjectMutationVariables>;\n\n/**\n * __useCreateProjectMutation__\n *\n * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateProjectMutation(baseOptions?: Apollo.MutationHookOptions<CreateProjectMutation, CreateProjectMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, options);\n      }\nexport type CreateProjectMutationHookResult = ReturnType<typeof useCreateProjectMutation>;\nexport type CreateProjectMutationResult = Apollo.MutationResult<CreateProjectMutation>;\nexport type CreateProjectMutationOptions = Apollo.BaseMutationOptions<CreateProjectMutation, CreateProjectMutationVariables>;\nexport const CreateTicketDocument = gql`\n    mutation CreateTicket($options: TicketInput!, $projectId: Int!) {\n  createTicket(options: $options, projectId: $projectId) {\n    id\n  }\n}\n    `;\nexport type CreateTicketMutationFn = Apollo.MutationFunction<CreateTicketMutation, CreateTicketMutationVariables>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions?: Apollo.MutationHookOptions<CreateTicketMutation, CreateTicketMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateTicketMutation, CreateTicketMutationVariables>(CreateTicketDocument, options);\n      }\nexport type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;\nexport type CreateTicketMutationResult = Apollo.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = Apollo.BaseMutationOptions<CreateTicketMutation, CreateTicketMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation DeleteProject($id: Int!) {\n  deleteProject(id: $id)\n}\n    `;\nexport type DeleteProjectMutationFn = Apollo.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, options);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = Apollo.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = Apollo.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const DeleteTicketDocument = gql`\n    mutation DeleteTicket($id: Int!) {\n  deleteTicket(id: $id)\n}\n    `;\nexport type DeleteTicketMutationFn = Apollo.MutationFunction<DeleteTicketMutation, DeleteTicketMutationVariables>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTicketMutation, DeleteTicketMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteTicketMutation, DeleteTicketMutationVariables>(DeleteTicketDocument, options);\n      }\nexport type DeleteTicketMutationHookResult = ReturnType<typeof useDeleteTicketMutation>;\nexport type DeleteTicketMutationResult = Apollo.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = Apollo.BaseMutationOptions<DeleteTicketMutation, DeleteTicketMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UpdateProjectDocument = gql`\n    mutation UpdateProject($options: ProjectInput!, $id: Int!) {\n  updateProject(options: $options, id: $id) {\n    id\n  }\n}\n    `;\nexport type UpdateProjectMutationFn = Apollo.MutationFunction<UpdateProjectMutation, UpdateProjectMutationVariables>;\n\n/**\n * __useUpdateProjectMutation__\n *\n * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateProjectMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProjectMutation, UpdateProjectMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateProjectMutation, UpdateProjectMutationVariables>(UpdateProjectDocument, options);\n      }\nexport type UpdateProjectMutationHookResult = ReturnType<typeof useUpdateProjectMutation>;\nexport type UpdateProjectMutationResult = Apollo.MutationResult<UpdateProjectMutation>;\nexport type UpdateProjectMutationOptions = Apollo.BaseMutationOptions<UpdateProjectMutation, UpdateProjectMutationVariables>;\nexport const UpdateTicketDocument = gql`\n    mutation UpdateTicket($options: TicketInput!, $id: Int!) {\n  updateTicket(options: $options, id: $id) {\n    id\n  }\n}\n    `;\nexport type UpdateTicketMutationFn = Apollo.MutationFunction<UpdateTicketMutation, UpdateTicketMutationVariables>;\n\n/**\n * __useUpdateTicketMutation__\n *\n * To run a mutation, you first call `useUpdateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTicketMutation, { data, loading, error }] = useUpdateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateTicketMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTicketMutation, UpdateTicketMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateTicketMutation, UpdateTicketMutationVariables>(UpdateTicketDocument, options);\n      }\nexport type UpdateTicketMutationHookResult = ReturnType<typeof useUpdateTicketMutation>;\nexport type UpdateTicketMutationResult = Apollo.MutationResult<UpdateTicketMutation>;\nexport type UpdateTicketMutationOptions = Apollo.BaseMutationOptions<UpdateTicketMutation, UpdateTicketMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const ProjectDocument = gql`\n    query Project($id: Int!) {\n  project(id: $id) {\n    title\n    id\n    description\n    tickets {\n      id\n      priority\n      title\n      status\n      description\n      users {\n        username\n      }\n    }\n    users {\n      id\n      username\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProjectQuery(baseOptions: Apollo.QueryHookOptions<ProjectQuery, ProjectQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, options);\n      }\nexport function useProjectLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectQuery, ProjectQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, options);\n        }\nexport type ProjectQueryHookResult = ReturnType<typeof useProjectQuery>;\nexport type ProjectLazyQueryHookResult = ReturnType<typeof useProjectLazyQuery>;\nexport type ProjectQueryResult = Apollo.QueryResult<ProjectQuery, ProjectQueryVariables>;\nexport const ProjectsDocument = gql`\n    query Projects {\n  projects {\n    description\n    id\n    tickets {\n      id\n      projectId\n    }\n    users {\n      id\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProjectsQuery(baseOptions?: Apollo.QueryHookOptions<ProjectsQuery, ProjectsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProjectsQuery, ProjectsQueryVariables>(ProjectsDocument, options);\n      }\nexport function useProjectsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectsQuery, ProjectsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProjectsQuery, ProjectsQueryVariables>(ProjectsDocument, options);\n        }\nexport type ProjectsQueryHookResult = ReturnType<typeof useProjectsQuery>;\nexport type ProjectsLazyQueryHookResult = ReturnType<typeof useProjectsLazyQuery>;\nexport type ProjectsQueryResult = Apollo.QueryResult<ProjectsQuery, ProjectsQueryVariables>;\nexport const TicketDocument = gql`\n    query Ticket($id: Int!) {\n  ticket(id: $id) {\n    id\n    title\n    status\n    description\n    priority\n    createdAt\n    updatedAt\n    project {\n      title\n    }\n    users {\n      username\n    }\n    comments {\n      text\n      user {\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTicketQuery(baseOptions: Apollo.QueryHookOptions<TicketQuery, TicketQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TicketQuery, TicketQueryVariables>(TicketDocument, options);\n      }\nexport function useTicketLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TicketQuery, TicketQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TicketQuery, TicketQueryVariables>(TicketDocument, options);\n        }\nexport type TicketQueryHookResult = ReturnType<typeof useTicketQuery>;\nexport type TicketLazyQueryHookResult = ReturnType<typeof useTicketLazyQuery>;\nexport type TicketQueryResult = Apollo.QueryResult<TicketQuery, TicketQueryVariables>;"]},"metadata":{},"sourceType":"module"}