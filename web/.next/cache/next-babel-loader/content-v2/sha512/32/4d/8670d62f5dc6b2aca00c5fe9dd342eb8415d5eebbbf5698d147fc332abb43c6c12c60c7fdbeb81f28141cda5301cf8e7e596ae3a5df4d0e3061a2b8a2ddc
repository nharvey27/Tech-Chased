{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nicholasharvey/Desktop/programming/techChased/web/src/pages/register.tsx\";\nimport React from \"react\";\nimport { Button, Box } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { InputField } from \"../components/inputField\";\n\nconst Register = ({}) => {\n  const router = useRouter();\n  const [register] = useRegisterMutation();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: \"\",\n        username: \"\",\n        password: \"\"\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await register({\n          variables: {\n            options: values\n          }\n        });\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n          setErrors(toErrorMap(response.data.register.errors));\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.user) {\n          if (typeof router.query.next === \"string\") {\n            router.push(router.query.next);\n          } else {\n            // worked\n            router.push(\"/\");\n          }\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Box, {\n        mx: \"auto\",\n        mt: \"10px\",\n        maxW: \"400px\",\n        w: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"username\",\n            placeholder: \"username \",\n            label: \"Username \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"email\",\n            placeholder: \"email \",\n            label: \"Email \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"password\",\n              placeholder: \"password\",\n              label: \"Password\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            isLoading: isSubmitting,\n            colorScheme: \"teal\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(Register);","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/pages/register.tsx"],"names":["React","Button","Box","Form","Formik","useRegisterMutation","withApollo","useRouter","toErrorMap","InputField","Register","router","register","email","username","password","values","setErrors","response","variables","options","data","errors","user","query","next","push","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Box } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { InputField } from \"../components/inputField\";\n\nconst Register: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const [register] = useRegisterMutation();\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={{ email: \"\", username: \"\", password: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register({\n            variables: { options: values },\n          });\n          if (response.data?.register.errors) {\n            setErrors(toErrorMap(response.data.register.errors));\n          } else if (response.data?.register.user) {\n            if (typeof router.query.next === \"string\") {\n              router.push(router.query.next);\n            } else {\n              // worked\n              router.push(\"/\");\n            }\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Box mx=\"auto\" mt={\"10px\"} maxW={\"400px\"} w=\"100%\">\n            <Form>\n              <InputField\n                name=\"username\"\n                placeholder=\"username \"\n                label=\"Username \"\n              />\n              <InputField name=\"email\" placeholder=\"email \" label=\"Email \" />\n              <Box mt={4}>\n                <InputField\n                  name=\"password\"\n                  placeholder=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                />\n              </Box>\n              <Button\n                mt={4}\n                type=\"submit\"\n                isLoading={isSubmitting}\n                colorScheme=\"teal\"\n              >\n                Login\n              </Button>\n            </Form>\n          </Box>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default withApollo({ ssr: false })(Register);\n"]},"metadata":{},"sourceType":"module"}