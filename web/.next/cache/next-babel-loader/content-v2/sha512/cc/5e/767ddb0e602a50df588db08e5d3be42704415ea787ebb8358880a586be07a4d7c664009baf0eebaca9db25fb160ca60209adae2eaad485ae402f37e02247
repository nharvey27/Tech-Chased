{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nicholasharvey/Desktop/programming/techChased/web/src/pages/login.tsx\";\nimport { Button, Box } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { useLoginMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { InputField } from \"../components/inputField\";\n\nconst Login = ({}) => {\n  const router = useRouter();\n  const [login] = useLoginMutation();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      username: \"\",\n      password: \"\"\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await login({\n        variables: values\n      });\n\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.login.errors) {\n        setErrors(toErrorMap(response.data.login.errors));\n      } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.login.user) {\n        if (typeof router.query.next === \"string\") {\n          router.push(router.query.next);\n        } else {\n          // worked\n          router.push(\"/\");\n        }\n      }\n    },\n    children: ({\n      isSubmitting\n    }) => /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          name: \"username\",\n          placeholder: \"username \",\n          label: \"Username \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"password\",\n            placeholder: \"password\",\n            label: \"Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          type: \"submit\",\n          isLoading: isSubmitting,\n          variantColor: \"teal\",\n          children: \"login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(Login);","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/pages/login.tsx"],"names":["Button","Box","Form","Formik","React","useLoginMutation","withApollo","useRouter","toErrorMap","InputField","Login","router","login","username","password","values","setErrors","response","variables","data","errors","user","query","next","push","isSubmitting","ssr"],"mappings":";;AAAA,SAKEA,MALF,EAMEC,GANF,QASO,kBATP;AAUA,SAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,QAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAKA,MAAMC,KAAmB,GAAG,CAAC,EAAD,KAAQ;AAClC,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAM,CAACK,KAAD,IAAUP,gBAAgB,EAAhC;AACA,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEQ,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,QAAQ,EAAE;AAA1B,KADjB;AAEE,IAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,KAAiC;AAAA;;AACzC,YAAMC,QAAQ,GAAG,MAAML,KAAK,CAAC;AAC3BM,QAAAA,SAAS,EAAEH;AADgB,OAAD,CAA5B;;AAGA,4BAAIE,QAAQ,CAACE,IAAb,2CAAI,eAAeP,KAAf,CAAqBQ,MAAzB,EAAiC;AAC/BJ,QAAAA,SAAS,CAACR,UAAU,CAACS,QAAQ,CAACE,IAAT,CAAcP,KAAd,CAAoBQ,MAArB,CAAX,CAAT;AACD,OAFD,MAEO,uBAAIH,QAAQ,CAACE,IAAb,4CAAI,gBAAeP,KAAf,CAAqBS,IAAzB,EAA+B;AACpC,YAAI,OAAOV,MAAM,CAACW,KAAP,CAAaC,IAApB,KAA6B,QAAjC,EAA2C;AACzCZ,UAAAA,MAAM,CAACa,IAAP,CAAYb,MAAM,CAACW,KAAP,CAAaC,IAAzB;AACD,SAFD,MAEO;AACL;AACAZ,UAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACD;AACF;AACF,KAhBH;AAAA,cAkBG,CAAC;AAAEC,MAAAA;AAAF,KAAD,kBACC,QAAC,GAAD;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,WAFd;AAGE,UAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,iCACE,QAAC,UAAD;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,WAAW,EAAC,UAFd;AAGE,YAAA,KAAK,EAAC,UAHR;AAIE,YAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF,eAcE,QAAC,MAAD;AACE,UAAA,EAAE,EAAE,CADN;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,SAAS,EAAEA,YAHb;AAIE,UAAA,YAAY,EAAC,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAnBJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD,CAnDD;;AAqDA,eAAenB,UAAU,CAAC;AAAEoB,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BhB,KAA3B,CAAf","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Button,\n  Box,\n  Flex,\n  Link,\n} from \"@chakra-ui/react\";\nimport { Field, Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { useLoginMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { InputField } from \"../components/inputField\";\nimport NextLink from \"next/link\";\n\ninterface loginProps {}\n\nconst Login: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const [login] = useLoginMutation();\n  return (\n    <Formik\n      initialValues={{ username: \"\", password: \"\" }}\n      onSubmit={async (values, { setErrors }) => {\n        const response = await login({\n          variables: values,\n        });\n        if (response.data?.login.errors) {\n          setErrors(toErrorMap(response.data.login.errors));\n        } else if (response.data?.login.user) {\n          if (typeof router.query.next === \"string\") {\n            router.push(router.query.next);\n          } else {\n            // worked\n            router.push(\"/\");\n          }\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Box>\n          <Form>\n            <InputField\n              name=\"username\"\n              placeholder=\"username \"\n              label=\"Username \"\n            />\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"Password\"\n                type=\"password\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              isLoading={isSubmitting}\n              variantColor=\"teal\"\n            >\n              login\n            </Button>\n          </Form>\n        </Box>\n      )}\n    </Formik>\n  );\n};\n\nexport default withApollo({ ssr: false })(Login);\n"]},"metadata":{},"sourceType":"module"}