{"ast":null,"code":"import _defineProperty from \"/Users/nicholasharvey/Desktop/programming/techChased/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/Users/nicholasharvey/Desktop/programming/techChased/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$();\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    query Ticket($id: Int!) {\\n  ticket(id: $id) {\\n    id\\n    title\\n    status\\n    description\\n    priority\\n    createdAt\\n    updatedAt\\n    project {\\n      title\\n    }\\n    users {\\n      username\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    query Projects {\\n  projects {\\n    description\\n    id\\n    tickets {\\n      id\\n      projectId\\n    }\\n    users {\\n      id\\n      username\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    query Project($id: Int!) {\\n  project(id: $id) {\\n    title\\n    id\\n    description\\n    tickets {\\n      id\\n      priority\\n      title\\n      status\\n      description\\n      users {\\n        username\\n      }\\n    }\\n    users {\\n      id\\n      username\\n      email\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    id\\n    username\\n    tickets {\\n      id\\n      title\\n      description\\n      status\\n      priority\\n    }\\n    projects {\\n      id\\n      title\\n      description\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($options: UsernamePasswordInput!) {\\n  register(options: $options) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($username: String!, $password: String!) {\\n  login(username: $username, password: $password) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUserResponse on UserResponse {\\n  errors {\\n    ...RegularError\\n  }\\n  user {\\n    ...RegularUser\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUser on User {\\n  id\\n  username\\n  tickets {\\n    id\\n    title\\n    description\\n    status\\n    priority\\n  }\\n  projects {\\n    id\\n    title\\n    description\\n  }\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularError on FieldError {\\n  field\\n  message\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nvar defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport var RegularErrorFragmentDoc = gql(_templateObject());\nexport var RegularUserFragmentDoc = gql(_templateObject2());\nexport var RegularUserResponseFragmentDoc = gql(_templateObject3(), RegularErrorFragmentDoc, RegularUserFragmentDoc);\nexport var LoginDocument = gql(_templateObject4(), RegularUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\n\n_s(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LogoutDocument = gql(_templateObject5());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s2();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LogoutDocument, options);\n}\n\n_s2(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var RegisterDocument = gql(_templateObject6(), RegularUserResponseFragmentDoc);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  _s3();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(RegisterDocument, options);\n}\n\n_s3(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var MeDocument = gql(_templateObject7());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s4();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\n\n_s4(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s5();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\n\n_s5(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var ProjectDocument = gql(_templateObject8());\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useProjectQuery(baseOptions) {\n  _s6();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectDocument, options);\n}\n\n_s6(useProjectQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useProjectLazyQuery(baseOptions) {\n  _s7();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectDocument, options);\n}\n\n_s7(useProjectLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var ProjectsDocument = gql(_templateObject9());\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useProjectsQuery(baseOptions) {\n  _s8();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectsDocument, options);\n}\n\n_s8(useProjectsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useProjectsLazyQuery(baseOptions) {\n  _s9();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectsDocument, options);\n}\n\n_s9(useProjectsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var TicketDocument = gql(_templateObject10());\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useTicketQuery(baseOptions) {\n  _s10();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(TicketDocument, options);\n}\n\n_s10(useTicketQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useTicketLazyQuery(baseOptions) {\n  _s11();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(TicketDocument, options);\n}\n\n_s11(useTicketLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","RegularErrorFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","LoginDocument","useLoginMutation","baseOptions","options","useMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","ProjectDocument","useProjectQuery","useProjectLazyQuery","ProjectsDocument","useProjectsQuery","useProjectsLazyQuery","TicketDocument","useTicketQuery","useTicketLazyQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,IAAMC,cAAc,GAAI,EAAxB;AACA;;AAsSA,OAAO,IAAMC,uBAAuB,GAAGH,GAAH,mBAA7B;AAMP,OAAO,IAAMI,sBAAsB,GAAGJ,GAAH,oBAA5B;AAkBP,OAAO,IAAMK,8BAA8B,GAAGL,GAAH,qBASrCG,uBATqC,EAUzCC,sBAVyC,CAApC;AAWP,OAAO,IAAME,aAAa,GAAGN,GAAH,qBAMpBK,8BANoB,CAAnB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAT,CAA0BC,WAA1B,EAA2G;AAAA;;AAC1G,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAA0DJ,aAA1D,EAAyEG,OAAzE,CAAP;AACD;;GAHSF,gB;UAEDN,MAAM,CAACS,W;;;AAKtB,OAAO,IAAMC,cAAc,GAAGX,GAAH,oBAApB;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,iBAAT,CAA2BJ,WAA3B,EAA8G;AAAA;;AAC7G,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAA4DC,cAA5D,EAA4EF,OAA5E,CAAP;AACD;;IAHSG,iB;UAEDX,MAAM,CAACS,W;;;AAKtB,OAAO,IAAMG,gBAAgB,GAAGb,GAAH,qBAMvBK,8BANuB,CAAtB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,mBAAT,CAA6BN,WAA7B,EAAoH;AAAA;;AACnH,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAAgEG,gBAAhE,EAAkFJ,OAAlF,CAAP;AACD;;IAHSK,mB;UAEDb,MAAM,CAACS,W;;;AAKtB,OAAO,IAAMK,UAAU,GAAGf,GAAH,oBAAhB;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgB,UAAT,CAAoBR,WAApB,EAAsF;AAAA;;AACrF,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgB,QAAP,CAA2CF,UAA3C,EAAuDN,OAAvD,CAAP;AACD;;IAHSO,U;UAEDf,MAAM,CAACgB,Q;;;AAEtB,OAAO,SAASC,cAAT,CAAwBV,WAAxB,EAA8F;AAAA;;AAC3F,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACkB,YAAP,CAA+CJ,UAA/C,EAA2DN,OAA3D,CAAP;AACD;;IAHOS,c;UAECjB,MAAM,CAACkB,Y;;;AAKxB,OAAO,IAAMC,eAAe,GAAGpB,GAAH,oBAArB;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqB,eAAT,CAAyBb,WAAzB,EAAoG;AAAA;;AACnG,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgB,QAAP,CAAqDG,eAArD,EAAsEX,OAAtE,CAAP;AACD;;IAHSY,e;UAEDpB,MAAM,CAACgB,Q;;;AAEtB,OAAO,SAASK,mBAAT,CAA6Bd,WAA7B,EAA6G;AAAA;;AAC1G,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACkB,YAAP,CAAyDC,eAAzD,EAA0EX,OAA1E,CAAP;AACD;;IAHOa,mB;UAECrB,MAAM,CAACkB,Y;;;AAKxB,OAAO,IAAMI,gBAAgB,GAAGvB,GAAH,oBAAtB;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwB,gBAAT,CAA0BhB,WAA1B,EAAwG;AAAA;;AACvG,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgB,QAAP,CAAuDM,gBAAvD,EAAyEd,OAAzE,CAAP;AACD;;IAHSe,gB;UAEDvB,MAAM,CAACgB,Q;;;AAEtB,OAAO,SAASQ,oBAAT,CAA8BjB,WAA9B,EAAgH;AAAA;;AAC7G,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACkB,YAAP,CAA2DI,gBAA3D,EAA6Ed,OAA7E,CAAP;AACD;;IAHOgB,oB;UAECxB,MAAM,CAACkB,Y;;;AAKxB,OAAO,IAAMO,cAAc,GAAG1B,GAAH,qBAApB;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2B,cAAT,CAAwBnB,WAAxB,EAAiG;AAAA;;AAChG,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACgB,QAAP,CAAmDS,cAAnD,EAAmEjB,OAAnE,CAAP;AACD;;KAHSkB,c;UAED1B,MAAM,CAACgB,Q;;;AAEtB,OAAO,SAASW,kBAAT,CAA4BpB,WAA5B,EAA0G;AAAA;;AACvG,MAAMC,OAAO,mCAAOP,cAAP,GAA0BM,WAA1B,CAAb;;AACA,SAAOP,MAAM,CAACkB,YAAP,CAAuDO,cAAvD,EAAuEjB,OAAvE,CAAP;AACD;;KAHOmB,kB;UAEC3B,MAAM,CAACkB,Y","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  createProject: Project;\n  deleteProject: Scalars['Boolean'];\n  updateProject: Project;\n  createTicket?: Maybe<Ticket>;\n  deleteTicket: Scalars['Boolean'];\n  updateTicket: Ticket;\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationCreateProjectArgs = {\n  options: ProjectInput;\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationUpdateProjectArgs = {\n  options: ProjectInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateTicketArgs = {\n  projectId: Scalars['Int'];\n  options: TicketInput;\n};\n\n\nexport type MutationDeleteTicketArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationUpdateTicketArgs = {\n  options: TicketInput;\n  id: Scalars['Int'];\n};\n\nexport type Project = {\n  __typename?: 'Project';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  users: Array<User>;\n  tickets: Array<Ticket>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type ProjectInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  projects: Array<Project>;\n  project: Project;\n  ticket: Ticket;\n  tickets: Array<Ticket>;\n};\n\n\nexport type QueryProjectArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryTicketArgs = {\n  id: Scalars['Int'];\n};\n\nexport type Ticket = {\n  __typename?: 'Ticket';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  status: Scalars['String'];\n  priority: Scalars['String'];\n  projectId: Scalars['Float'];\n  project: Project;\n  users: Array<User>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type TicketInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n  status: Scalars['String'];\n  priority: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  projects?: Maybe<Array<Project>>;\n  tickets?: Maybe<Array<Ticket>>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type RegularErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username'>\n  & { tickets?: Maybe<Array<(\n    { __typename?: 'Ticket' }\n    & Pick<Ticket, 'id' | 'title' | 'description' | 'status' | 'priority'>\n  )>>, projects?: Maybe<Array<(\n    { __typename?: 'Project' }\n    & Pick<Project, 'id' | 'title' | 'description'>\n  )>> }\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<Array<(\n    { __typename?: 'FieldError' }\n    & RegularErrorFragment\n  )>>, user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username'>\n    & { tickets?: Maybe<Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'title' | 'description' | 'status' | 'priority'>\n    )>>, projects?: Maybe<Array<(\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'title' | 'description'>\n    )>> }\n  )> }\n);\n\nexport type ProjectQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type ProjectQuery = (\n  { __typename?: 'Query' }\n  & { project: (\n    { __typename?: 'Project' }\n    & Pick<Project, 'title' | 'id' | 'description'>\n    & { tickets: Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'priority' | 'title' | 'status' | 'description'>\n      & { users: Array<(\n        { __typename?: 'User' }\n        & Pick<User, 'username'>\n      )> }\n    )>, users: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username' | 'email'>\n    )> }\n  ) }\n);\n\nexport type ProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProjectsQuery = (\n  { __typename?: 'Query' }\n  & { projects: Array<(\n    { __typename?: 'Project' }\n    & Pick<Project, 'description' | 'id'>\n    & { tickets: Array<(\n      { __typename?: 'Ticket' }\n      & Pick<Ticket, 'id' | 'projectId'>\n    )>, users: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    )> }\n  )> }\n);\n\nexport type TicketQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type TicketQuery = (\n  { __typename?: 'Query' }\n  & { ticket: (\n    { __typename?: 'Ticket' }\n    & Pick<Ticket, 'id' | 'title' | 'status' | 'description' | 'priority' | 'createdAt' | 'updatedAt'>\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'title'>\n    ), users: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    )> }\n  ) }\n);\n\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n  tickets {\n    id\n    title\n    description\n    status\n    priority\n  }\n  projects {\n    id\n    title\n    description\n  }\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const ProjectDocument = gql`\n    query Project($id: Int!) {\n  project(id: $id) {\n    title\n    id\n    description\n    tickets {\n      id\n      priority\n      title\n      status\n      description\n      users {\n        username\n      }\n    }\n    users {\n      id\n      username\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProjectQuery(baseOptions: Apollo.QueryHookOptions<ProjectQuery, ProjectQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, options);\n      }\nexport function useProjectLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectQuery, ProjectQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, options);\n        }\nexport type ProjectQueryHookResult = ReturnType<typeof useProjectQuery>;\nexport type ProjectLazyQueryHookResult = ReturnType<typeof useProjectLazyQuery>;\nexport type ProjectQueryResult = Apollo.QueryResult<ProjectQuery, ProjectQueryVariables>;\nexport const ProjectsDocument = gql`\n    query Projects {\n  projects {\n    description\n    id\n    tickets {\n      id\n      projectId\n    }\n    users {\n      id\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProjectsQuery(baseOptions?: Apollo.QueryHookOptions<ProjectsQuery, ProjectsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProjectsQuery, ProjectsQueryVariables>(ProjectsDocument, options);\n      }\nexport function useProjectsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectsQuery, ProjectsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProjectsQuery, ProjectsQueryVariables>(ProjectsDocument, options);\n        }\nexport type ProjectsQueryHookResult = ReturnType<typeof useProjectsQuery>;\nexport type ProjectsLazyQueryHookResult = ReturnType<typeof useProjectsLazyQuery>;\nexport type ProjectsQueryResult = Apollo.QueryResult<ProjectsQuery, ProjectsQueryVariables>;\nexport const TicketDocument = gql`\n    query Ticket($id: Int!) {\n  ticket(id: $id) {\n    id\n    title\n    status\n    description\n    priority\n    createdAt\n    updatedAt\n    project {\n      title\n    }\n    users {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTicketQuery(baseOptions: Apollo.QueryHookOptions<TicketQuery, TicketQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TicketQuery, TicketQueryVariables>(TicketDocument, options);\n      }\nexport function useTicketLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TicketQuery, TicketQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TicketQuery, TicketQueryVariables>(TicketDocument, options);\n        }\nexport type TicketQueryHookResult = ReturnType<typeof useTicketQuery>;\nexport type TicketLazyQueryHookResult = ReturnType<typeof useTicketLazyQuery>;\nexport type TicketQueryResult = Apollo.QueryResult<TicketQuery, TicketQueryVariables>;"]},"metadata":{},"sourceType":"module"}