{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nicholasharvey/Desktop/programming/techChased/web/src/pages/login.tsx\";\nimport React from \"react\";\nimport { Button, Box } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { MeDocument, useLoginMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { InputField } from \"../components/inputField\";\n\nconst Login = ({}) => {\n  const router = useRouter();\n  const [login] = useLoginMutation();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      username: \"\",\n      password: \"\"\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await login({\n        variables: values,\n        update: (cache, {\n          data\n        }) => {\n          cache.writeQuery({\n            query: MeDocument,\n            data: {\n              __typename: \"Query\",\n              me: data === null || data === void 0 ? void 0 : data.login.user\n            }\n          });\n          cache.evict({\n            fieldName: \"projects:{}\"\n          });\n        }\n      });\n      console.log(response);\n\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.login.errors) {\n        setErrors(toErrorMap(response.data.login.errors));\n      } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.login.user) {\n        if (typeof router.query.next === \"string\") {\n          router.push(router.query.next);\n        } else {\n          // worked\n          router.push(\"/\");\n        }\n      }\n    },\n    children: ({\n      isSubmitting\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        name: \"username\",\n        placeholder: \"username \",\n        label: \"Username \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 4,\n        children: /*#__PURE__*/_jsxDEV(InputField, {\n          name: \"password\",\n          placeholder: \"password\",\n          label: \"Password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        mt: 4,\n        type: \"submit\",\n        isLoading: isSubmitting,\n        colorScheme: \"teal\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(Login);","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/pages/login.tsx"],"names":["React","Button","Box","Form","Formik","MeDocument","useLoginMutation","withApollo","useRouter","toErrorMap","InputField","Login","router","login","username","password","values","setErrors","response","variables","update","cache","data","writeQuery","query","__typename","me","user","evict","fieldName","console","log","errors","next","push","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Box } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { MeDocument, MeQuery, useLoginMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { InputField } from \"../components/inputField\";\n\nconst Login: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const [login] = useLoginMutation();\n  return (\n    <Formik\n      initialValues={{ username: \"\", password: \"\" }}\n      onSubmit={async (values, { setErrors }) => {\n        const response = await login({\n          variables: values,\n          update: (cache, { data }) => {\n            cache.writeQuery({\n              query: MeDocument,\n              data: {\n                __typename: \"Query\",\n                me: data?.login.user,\n              },\n            });\n            cache.evict({ fieldName: \"projects:{}\" });\n          },\n        });\n        console.log(response);\n        if (response.data?.login.errors) {\n          setErrors(toErrorMap(response.data.login.errors));\n        } else if (response.data?.login.user) {\n          if (typeof router.query.next === \"string\") {\n            router.push(router.query.next);\n          } else {\n            // worked\n            router.push(\"/\");\n          }\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <InputField\n            name=\"username\"\n            placeholder=\"username \"\n            label=\"Username \"\n          />\n          <Box mt={4}>\n            <InputField\n              name=\"password\"\n              placeholder=\"password\"\n              label=\"Password\"\n              type=\"password\"\n            />\n          </Box>\n          <Button\n            mt={4}\n            type=\"submit\"\n            isLoading={isSubmitting}\n            colorScheme=\"teal\"\n          >\n            Login\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default withApollo({ ssr: false })(Login);\n"]},"metadata":{},"sourceType":"module"}