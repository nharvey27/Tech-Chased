{"ast":null,"code":"import _defineProperty from \"/Users/nicholasharvey/Desktop/programming/techChased/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/Users/nicholasharvey/Desktop/programming/techChased/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$();\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n  query Ticket($id: Int!) {\\n    ticket(id: $id) {\\n      id\\n      title\\n      status\\n      description\\n      priority\\n      createdAt\\n      updatedAt\\n      project {\\n        title\\n      }\\n      users {\\n        username\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n  query Projects {\\n    projects {\\n      description\\n      id\\n      tickets {\\n        id\\n        projectId\\n      }\\n      users {\\n        id\\n        username\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n  query Project($id: Int!) {\\n    project(id: $id) {\\n      title\\n      id\\n      description\\n      tickets {\\n        id\\n        priority\\n        title\\n        status\\n        description\\n        users {\\n          username\\n        }\\n      }\\n      users {\\n        id\\n        username\\n        email\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n  query Me {\\n    me {\\n      id\\n      username\\n      tickets {\\n        id\\n        title\\n        description\\n        status\\n        priority\\n      }\\n      projects {\\n        id\\n        title\\n        description\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UpdateTicket($options: TicketInput!, $id: Int!) {\\n    updateTicket(options: $options, id: $id) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UpdateProject($options: ProjectInput!, $id: Int!) {\\n    updateProject(options: $options, id: $id) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation Register($options: UsernamePasswordInput!) {\\n    register(options: $options) {\\n      ...RegularUserResponse\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation Logout {\\n    logout\\n  }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation Login($username: String!, $password: String!) {\\n    login(username: $username, password: $password) {\\n      ...RegularUserResponse\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DeleteTicket($id: Int!) {\\n    deleteTicket(id: $id)\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DeleteProject($id: Int!) {\\n    deleteProject(id: $id)\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CreateTicket($options: TicketInput!, $projectId: Int!) {\\n    createTicket(options: $options, projectId: $projectId) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CreateProject($options: ProjectInput!) {\\n    createProject(options: $options) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  fragment RegularUserResponse on UserResponse {\\n    errors {\\n      ...RegularError\\n    }\\n    user {\\n      ...RegularUser\\n    }\\n  }\\n  \", \"\\n  \", \"\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  fragment RegularUser on User {\\n    id\\n    username\\n    tickets {\\n      id\\n      title\\n      description\\n      status\\n      priority\\n    }\\n    projects {\\n      id\\n      title\\n      description\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  fragment RegularError on FieldError {\\n    field\\n    message\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nvar defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport var RegularErrorFragmentDoc = gql(_templateObject());\nexport var RegularUserFragmentDoc = gql(_templateObject2());\nexport var RegularUserResponseFragmentDoc = gql(_templateObject3(), RegularErrorFragmentDoc, RegularUserFragmentDoc);\nexport var CreateProjectDocument = gql(_templateObject4());\n\n/**\n * __useCreateProjectMutation__\n *\n * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateProjectMutation(baseOptions) {\n  _s();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateProjectDocument, options);\n}\n\n_s(useCreateProjectMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateTicketDocument = gql(_templateObject5());\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions) {\n  _s2();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTicketDocument, options);\n}\n\n_s2(useCreateTicketMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteProjectDocument = gql(_templateObject6());\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions) {\n  _s3();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteProjectDocument, options);\n}\n\n_s3(useDeleteProjectMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteTicketDocument = gql(_templateObject7());\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions) {\n  _s4();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteTicketDocument, options);\n}\n\n_s4(useDeleteTicketMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LoginDocument = gql(_templateObject8(), RegularUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s5();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\n\n_s5(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LogoutDocument = gql(_templateObject9());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s6();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LogoutDocument, options);\n}\n\n_s6(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var RegisterDocument = gql(_templateObject10(), RegularUserResponseFragmentDoc);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  _s7();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(RegisterDocument, options);\n}\n\n_s7(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdateProjectDocument = gql(_templateObject11());\n\n/**\n * __useUpdateProjectMutation__\n *\n * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateProjectMutation(baseOptions) {\n  _s8();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateProjectDocument, options);\n}\n\n_s8(useUpdateProjectMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdateTicketDocument = gql(_templateObject12());\n\n/**\n * __useUpdateTicketMutation__\n *\n * To run a mutation, you first call `useUpdateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTicketMutation, { data, loading, error }] = useUpdateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateTicketMutation(baseOptions) {\n  _s9();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateTicketDocument, options);\n}\n\n_s9(useUpdateTicketMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var MeDocument = gql(_templateObject13());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s10();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\n\n_s10(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s11();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\n\n_s11(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var ProjectDocument = gql(_templateObject14());\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useProjectQuery(baseOptions) {\n  _s12();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectDocument, options);\n}\n\n_s12(useProjectQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useProjectLazyQuery(baseOptions) {\n  _s13();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectDocument, options);\n}\n\n_s13(useProjectLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var ProjectsDocument = gql(_templateObject15());\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useProjectsQuery(baseOptions) {\n  _s14();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectsDocument, options);\n}\n\n_s14(useProjectsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useProjectsLazyQuery(baseOptions) {\n  _s15();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectsDocument, options);\n}\n\n_s15(useProjectsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var TicketDocument = gql(_templateObject16());\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useTicketQuery(baseOptions) {\n  _s16();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(TicketDocument, options);\n}\n\n_s16(useTicketQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useTicketLazyQuery(baseOptions) {\n  _s17();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(TicketDocument, options);\n}\n\n_s17(useTicketLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","RegularErrorFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","CreateProjectDocument","useCreateProjectMutation","baseOptions","options","useMutation","CreateTicketDocument","useCreateTicketMutation","DeleteProjectDocument","useDeleteProjectMutation","DeleteTicketDocument","useDeleteTicketMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","UpdateProjectDocument","useUpdateProjectMutation","UpdateTicketDocument","useUpdateTicketMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","ProjectDocument","useProjectQuery","useProjectLazyQuery","ProjectsDocument","useProjectsQuery","useProjectsLazyQuery","TicketDocument","useTicketQuery","useTicketLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type FieldError = {\n  __typename?: \"FieldError\";\n  field: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n};\n\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars[\"Boolean\"];\n  createProject: Project;\n  deleteProject: Scalars[\"Boolean\"];\n  updateProject: Project;\n  createTicket?: Maybe<Ticket>;\n  deleteTicket: Scalars[\"Boolean\"];\n  updateTicket: Ticket;\n};\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\nexport type MutationLoginArgs = {\n  password: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n};\n\nexport type MutationCreateProjectArgs = {\n  options: ProjectInput;\n};\n\nexport type MutationDeleteProjectArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type MutationUpdateProjectArgs = {\n  options: ProjectInput;\n  id: Scalars[\"Int\"];\n};\n\nexport type MutationCreateTicketArgs = {\n  projectId: Scalars[\"Int\"];\n  options: TicketInput;\n};\n\nexport type MutationDeleteTicketArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type MutationUpdateTicketArgs = {\n  options: TicketInput;\n  id: Scalars[\"Int\"];\n};\n\nexport type Project = {\n  __typename?: \"Project\";\n  id: Scalars[\"Float\"];\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  users: Array<User>;\n  tickets: Array<Ticket>;\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n};\n\nexport type ProjectInput = {\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  me?: Maybe<User>;\n  projects: Array<Project>;\n  project: Project;\n  ticket: Ticket;\n  tickets: Array<Ticket>;\n};\n\nexport type QueryProjectArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type QueryTicketArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type Ticket = {\n  __typename?: \"Ticket\";\n  id: Scalars[\"Float\"];\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  status: Scalars[\"String\"];\n  priority: Scalars[\"String\"];\n  projectId: Scalars[\"Float\"];\n  project: Project;\n  users: Array<User>;\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n};\n\nexport type TicketInput = {\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  status: Scalars[\"String\"];\n  priority: Scalars[\"String\"];\n};\n\nexport type User = {\n  __typename?: \"User\";\n  id: Scalars[\"Float\"];\n  username: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n  projects?: Maybe<Array<Project>>;\n  tickets?: Maybe<Array<Ticket>>;\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n};\n\nexport type UserResponse = {\n  __typename?: \"UserResponse\";\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n};\n\nexport type RegularErrorFragment = { __typename?: \"FieldError\" } & Pick<\n  FieldError,\n  \"field\" | \"message\"\n>;\n\nexport type RegularUserFragment = { __typename?: \"User\" } & Pick<\n  User,\n  \"id\" | \"username\"\n> & {\n    tickets?: Maybe<\n      Array<\n        { __typename?: \"Ticket\" } & Pick<\n          Ticket,\n          \"id\" | \"title\" | \"description\" | \"status\" | \"priority\"\n        >\n      >\n    >;\n    projects?: Maybe<\n      Array<\n        { __typename?: \"Project\" } & Pick<\n          Project,\n          \"id\" | \"title\" | \"description\"\n        >\n      >\n    >;\n  };\n\nexport type RegularUserResponseFragment = { __typename?: \"UserResponse\" } & {\n  errors?: Maybe<Array<{ __typename?: \"FieldError\" } & RegularErrorFragment>>;\n  user?: Maybe<{ __typename?: \"User\" } & RegularUserFragment>;\n};\n\nexport type CreateProjectMutationVariables = Exact<{\n  options: ProjectInput;\n}>;\n\nexport type CreateProjectMutation = { __typename?: \"Mutation\" } & {\n  createProject: { __typename?: \"Project\" } & Pick<Project, \"id\">;\n};\n\nexport type CreateTicketMutationVariables = Exact<{\n  options: TicketInput;\n  projectId: Scalars[\"Int\"];\n}>;\n\nexport type CreateTicketMutation = { __typename?: \"Mutation\" } & {\n  createTicket?: Maybe<{ __typename?: \"Ticket\" } & Pick<Ticket, \"id\">>;\n};\n\nexport type DeleteProjectMutationVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type DeleteProjectMutation = { __typename?: \"Mutation\" } & Pick<\n  Mutation,\n  \"deleteProject\"\n>;\n\nexport type DeleteTicketMutationVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type DeleteTicketMutation = { __typename?: \"Mutation\" } & Pick<\n  Mutation,\n  \"deleteTicket\"\n>;\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n}>;\n\nexport type LoginMutation = { __typename?: \"Mutation\" } & {\n  login: { __typename?: \"UserResponse\" } & RegularUserResponseFragment;\n};\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never }>;\n\nexport type LogoutMutation = { __typename?: \"Mutation\" } & Pick<\n  Mutation,\n  \"logout\"\n>;\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\nexport type RegisterMutation = { __typename?: \"Mutation\" } & {\n  register: { __typename?: \"UserResponse\" } & RegularUserResponseFragment;\n};\n\nexport type UpdateProjectMutationVariables = Exact<{\n  options: ProjectInput;\n  id: Scalars[\"Int\"];\n}>;\n\nexport type UpdateProjectMutation = { __typename?: \"Mutation\" } & {\n  updateProject: { __typename?: \"Project\" } & Pick<Project, \"id\">;\n};\n\nexport type UpdateTicketMutationVariables = Exact<{\n  options: TicketInput;\n  id: Scalars[\"Int\"];\n}>;\n\nexport type UpdateTicketMutation = { __typename?: \"Mutation\" } & {\n  updateTicket: { __typename?: \"Ticket\" } & Pick<Ticket, \"id\">;\n};\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MeQuery = { __typename?: \"Query\" } & {\n  me?: Maybe<\n    { __typename?: \"User\" } & Pick<User, \"id\" | \"username\"> & {\n        tickets?: Maybe<\n          Array<\n            { __typename?: \"Ticket\" } & Pick<\n              Ticket,\n              \"id\" | \"title\" | \"description\" | \"status\" | \"priority\"\n            >\n          >\n        >;\n        projects?: Maybe<\n          Array<\n            { __typename?: \"Project\" } & Pick<\n              Project,\n              \"id\" | \"title\" | \"description\"\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport type ProjectQueryVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type ProjectQuery = { __typename?: \"Query\" } & {\n  project: { __typename?: \"Project\" } & Pick<\n    Project,\n    \"title\" | \"id\" | \"description\"\n  > & {\n      tickets: Array<\n        { __typename?: \"Ticket\" } & Pick<\n          Ticket,\n          \"id\" | \"priority\" | \"title\" | \"status\" | \"description\"\n        > & { users: Array<{ __typename?: \"User\" } & Pick<User, \"username\">> }\n      >;\n      users: Array<\n        { __typename?: \"User\" } & Pick<User, \"id\" | \"username\" | \"email\">\n      >;\n    };\n};\n\nexport type ProjectsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type ProjectsQuery = { __typename?: \"Query\" } & {\n  projects: Array<\n    { __typename?: \"Project\" } & Pick<Project, \"description\" | \"id\"> & {\n        tickets: Array<\n          { __typename?: \"Ticket\" } & Pick<Ticket, \"id\" | \"projectId\">\n        >;\n        users: Array<{ __typename?: \"User\" } & Pick<User, \"id\" | \"username\">>;\n      }\n  >;\n};\n\nexport type TicketQueryVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type TicketQuery = { __typename?: \"Query\" } & {\n  ticket: { __typename?: \"Ticket\" } & Pick<\n    Ticket,\n    | \"id\"\n    | \"title\"\n    | \"status\"\n    | \"description\"\n    | \"priority\"\n    | \"createdAt\"\n    | \"updatedAt\"\n  > & {\n      project: { __typename?: \"Project\" } & Pick<Project, \"title\">;\n      users: Array<{ __typename?: \"User\" } & Pick<User, \"username\">>;\n    };\n};\n\nexport const RegularErrorFragmentDoc = gql`\n  fragment RegularError on FieldError {\n    field\n    message\n  }\n`;\nexport const RegularUserFragmentDoc = gql`\n  fragment RegularUser on User {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n`;\nexport const RegularUserResponseFragmentDoc = gql`\n  fragment RegularUserResponse on UserResponse {\n    errors {\n      ...RegularError\n    }\n    user {\n      ...RegularUser\n    }\n  }\n  ${RegularErrorFragmentDoc}\n  ${RegularUserFragmentDoc}\n`;\nexport const CreateProjectDocument = gql`\n  mutation CreateProject($options: ProjectInput!) {\n    createProject(options: $options) {\n      id\n    }\n  }\n`;\nexport type CreateProjectMutationFn = Apollo.MutationFunction<\n  CreateProjectMutation,\n  CreateProjectMutationVariables\n>;\n\n/**\n * __useCreateProjectMutation__\n *\n * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateProjectMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateProjectMutation,\n    CreateProjectMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    CreateProjectMutation,\n    CreateProjectMutationVariables\n  >(CreateProjectDocument, options);\n}\nexport type CreateProjectMutationHookResult = ReturnType<\n  typeof useCreateProjectMutation\n>;\nexport type CreateProjectMutationResult =\n  Apollo.MutationResult<CreateProjectMutation>;\nexport type CreateProjectMutationOptions = Apollo.BaseMutationOptions<\n  CreateProjectMutation,\n  CreateProjectMutationVariables\n>;\nexport const CreateTicketDocument = gql`\n  mutation CreateTicket($options: TicketInput!, $projectId: Int!) {\n    createTicket(options: $options, projectId: $projectId) {\n      id\n    }\n  }\n`;\nexport type CreateTicketMutationFn = Apollo.MutationFunction<\n  CreateTicketMutation,\n  CreateTicketMutationVariables\n>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useCreateTicketMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateTicketMutation,\n    CreateTicketMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    CreateTicketMutation,\n    CreateTicketMutationVariables\n  >(CreateTicketDocument, options);\n}\nexport type CreateTicketMutationHookResult = ReturnType<\n  typeof useCreateTicketMutation\n>;\nexport type CreateTicketMutationResult =\n  Apollo.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = Apollo.BaseMutationOptions<\n  CreateTicketMutation,\n  CreateTicketMutationVariables\n>;\nexport const DeleteProjectDocument = gql`\n  mutation DeleteProject($id: Int!) {\n    deleteProject(id: $id)\n  }\n`;\nexport type DeleteProjectMutationFn = Apollo.MutationFunction<\n  DeleteProjectMutation,\n  DeleteProjectMutationVariables\n>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteProjectMutation,\n    DeleteProjectMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    DeleteProjectMutation,\n    DeleteProjectMutationVariables\n  >(DeleteProjectDocument, options);\n}\nexport type DeleteProjectMutationHookResult = ReturnType<\n  typeof useDeleteProjectMutation\n>;\nexport type DeleteProjectMutationResult =\n  Apollo.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = Apollo.BaseMutationOptions<\n  DeleteProjectMutation,\n  DeleteProjectMutationVariables\n>;\nexport const DeleteTicketDocument = gql`\n  mutation DeleteTicket($id: Int!) {\n    deleteTicket(id: $id)\n  }\n`;\nexport type DeleteTicketMutationFn = Apollo.MutationFunction<\n  DeleteTicketMutation,\n  DeleteTicketMutationVariables\n>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteTicketMutation,\n    DeleteTicketMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    DeleteTicketMutation,\n    DeleteTicketMutationVariables\n  >(DeleteTicketDocument, options);\n}\nexport type DeleteTicketMutationHookResult = ReturnType<\n  typeof useDeleteTicketMutation\n>;\nexport type DeleteTicketMutationResult =\n  Apollo.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = Apollo.BaseMutationOptions<\n  DeleteTicketMutation,\n  DeleteTicketMutationVariables\n>;\nexport const LoginDocument = gql`\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      ...RegularUserResponse\n    }\n  }\n  ${RegularUserResponseFragmentDoc}\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    options\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const LogoutDocument = gql`\n  mutation Logout {\n    logout\n  }\n`;\nexport type LogoutMutationFn = Apollo.MutationFunction<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LogoutMutation,\n    LogoutMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(\n    LogoutDocument,\n    options\n  );\n}\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\nexport const RegisterDocument = gql`\n  mutation Register($options: UsernamePasswordInput!) {\n    register(options: $options) {\n      ...RegularUserResponse\n    }\n  }\n  ${RegularUserResponseFragmentDoc}\n`;\nexport type RegisterMutationFn = Apollo.MutationFunction<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RegisterMutation,\n    RegisterMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(\n    RegisterDocument,\n    options\n  );\n}\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\nexport const UpdateProjectDocument = gql`\n  mutation UpdateProject($options: ProjectInput!, $id: Int!) {\n    updateProject(options: $options, id: $id) {\n      id\n    }\n  }\n`;\nexport type UpdateProjectMutationFn = Apollo.MutationFunction<\n  UpdateProjectMutation,\n  UpdateProjectMutationVariables\n>;\n\n/**\n * __useUpdateProjectMutation__\n *\n * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateProjectMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateProjectMutation,\n    UpdateProjectMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    UpdateProjectMutation,\n    UpdateProjectMutationVariables\n  >(UpdateProjectDocument, options);\n}\nexport type UpdateProjectMutationHookResult = ReturnType<\n  typeof useUpdateProjectMutation\n>;\nexport type UpdateProjectMutationResult =\n  Apollo.MutationResult<UpdateProjectMutation>;\nexport type UpdateProjectMutationOptions = Apollo.BaseMutationOptions<\n  UpdateProjectMutation,\n  UpdateProjectMutationVariables\n>;\nexport const UpdateTicketDocument = gql`\n  mutation UpdateTicket($options: TicketInput!, $id: Int!) {\n    updateTicket(options: $options, id: $id) {\n      id\n    }\n  }\n`;\nexport type UpdateTicketMutationFn = Apollo.MutationFunction<\n  UpdateTicketMutation,\n  UpdateTicketMutationVariables\n>;\n\n/**\n * __useUpdateTicketMutation__\n *\n * To run a mutation, you first call `useUpdateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTicketMutation, { data, loading, error }] = useUpdateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateTicketMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateTicketMutation,\n    UpdateTicketMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    UpdateTicketMutation,\n    UpdateTicketMutationVariables\n  >(UpdateTicketDocument, options);\n}\nexport type UpdateTicketMutationHookResult = ReturnType<\n  typeof useUpdateTicketMutation\n>;\nexport type UpdateTicketMutationResult =\n  Apollo.MutationResult<UpdateTicketMutation>;\nexport type UpdateTicketMutationOptions = Apollo.BaseMutationOptions<\n  UpdateTicketMutation,\n  UpdateTicketMutationVariables\n>;\nexport const MeDocument = gql`\n  query Me {\n    me {\n      id\n      username\n      tickets {\n        id\n        title\n        description\n        status\n        priority\n      }\n      projects {\n        id\n        title\n        description\n      }\n    }\n  }\n`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const ProjectDocument = gql`\n  query Project($id: Int!) {\n    project(id: $id) {\n      title\n      id\n      description\n      tickets {\n        id\n        priority\n        title\n        status\n        description\n        users {\n          username\n        }\n      }\n      users {\n        id\n        username\n        email\n      }\n    }\n  }\n`;\n\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProjectQuery(\n  baseOptions: Apollo.QueryHookOptions<ProjectQuery, ProjectQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ProjectQuery, ProjectQueryVariables>(\n    ProjectDocument,\n    options\n  );\n}\nexport function useProjectLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ProjectQuery, ProjectQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ProjectQuery, ProjectQueryVariables>(\n    ProjectDocument,\n    options\n  );\n}\nexport type ProjectQueryHookResult = ReturnType<typeof useProjectQuery>;\nexport type ProjectLazyQueryHookResult = ReturnType<typeof useProjectLazyQuery>;\nexport type ProjectQueryResult = Apollo.QueryResult<\n  ProjectQuery,\n  ProjectQueryVariables\n>;\nexport const ProjectsDocument = gql`\n  query Projects {\n    projects {\n      description\n      id\n      tickets {\n        id\n        projectId\n      }\n      users {\n        id\n        username\n      }\n    }\n  }\n`;\n\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProjectsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ProjectsQuery, ProjectsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ProjectsQuery, ProjectsQueryVariables>(\n    ProjectsDocument,\n    options\n  );\n}\nexport function useProjectsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ProjectsQuery,\n    ProjectsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ProjectsQuery, ProjectsQueryVariables>(\n    ProjectsDocument,\n    options\n  );\n}\nexport type ProjectsQueryHookResult = ReturnType<typeof useProjectsQuery>;\nexport type ProjectsLazyQueryHookResult = ReturnType<\n  typeof useProjectsLazyQuery\n>;\nexport type ProjectsQueryResult = Apollo.QueryResult<\n  ProjectsQuery,\n  ProjectsQueryVariables\n>;\nexport const TicketDocument = gql`\n  query Ticket($id: Int!) {\n    ticket(id: $id) {\n      id\n      title\n      status\n      description\n      priority\n      createdAt\n      updatedAt\n      project {\n        title\n      }\n      users {\n        username\n      }\n    }\n  }\n`;\n\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTicketQuery(\n  baseOptions: Apollo.QueryHookOptions<TicketQuery, TicketQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<TicketQuery, TicketQueryVariables>(\n    TicketDocument,\n    options\n  );\n}\nexport function useTicketLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<TicketQuery, TicketQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<TicketQuery, TicketQueryVariables>(\n    TicketDocument,\n    options\n  );\n}\nexport type TicketQueryHookResult = ReturnType<typeof useTicketQuery>;\nexport type TicketLazyQueryHookResult = ReturnType<typeof useTicketLazyQuery>;\nexport type TicketQueryResult = Apollo.QueryResult<\n  TicketQuery,\n  TicketQueryVariables\n>;\n"]},"metadata":{},"sourceType":"module"}