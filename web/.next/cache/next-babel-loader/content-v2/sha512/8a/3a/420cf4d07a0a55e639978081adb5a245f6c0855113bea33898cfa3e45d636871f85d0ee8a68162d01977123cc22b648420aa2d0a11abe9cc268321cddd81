{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const RegularErrorFragmentDoc = gql`\n  fragment RegularError on FieldError {\n    field\n    message\n  }\n`;\nexport const RegularUserFragmentDoc = gql`\n  fragment RegularUser on User {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n`;\nexport const RegularUserResponseFragmentDoc = gql`\n  fragment RegularUserResponse on UserResponse {\n    errors {\n      ...RegularError\n    }\n    user {\n      ...RegularUser\n    }\n  }\n  ${RegularErrorFragmentDoc}\n  ${RegularUserFragmentDoc}\n`;\nexport const CreateProjectDocument = gql`\n  mutation CreateProject($options: ProjectInput!) {\n    createProject(options: $options) {\n      id\n    }\n  }\n`;\n\n/**\n * __useCreateProjectMutation__\n *\n * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateProjectMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateProjectDocument, options);\n}\nexport const CreateTicketDocument = gql`\n  mutation CreateTicket($options: TicketInput!, $projectId: Int!) {\n    createTicket(options: $options, projectId: $projectId) {\n      id\n    }\n  }\n`;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useCreateTicketMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTicketDocument, options);\n}\nexport const DeleteProjectDocument = gql`\n  mutation DeleteProject($id: Int!) {\n    deleteProject(id: $id)\n  }\n`;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteProjectDocument, options);\n}\nexport const DeleteTicketDocument = gql`\n  mutation DeleteTicket($id: Int!) {\n    deleteTicket(id: $id)\n  }\n`;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteTicketDocument, options);\n}\nexport const LoginDocument = gql`\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      ...RegularUserResponse\n    }\n  }\n  ${RegularUserResponseFragmentDoc}\n`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\nexport const LogoutDocument = gql`\n  mutation Logout {\n    logout\n  }\n`;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LogoutDocument, options);\n}\nexport const RegisterDocument = gql`\n  mutation Register($options: UsernamePasswordInput!) {\n    register(options: $options) {\n      ...RegularUserResponse\n    }\n  }\n  ${RegularUserResponseFragmentDoc}\n`;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(RegisterDocument, options);\n}\nexport const UpdateProjectDocument = gql`\n  mutation UpdateProject($options: ProjectInput!, $id: Int!) {\n    updateProject(options: $options, id: $id) {\n      id\n    }\n  }\n`;\n\n/**\n * __useUpdateProjectMutation__\n *\n * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateProjectMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateProjectDocument, options);\n}\nexport const UpdateTicketDocument = gql`\n  mutation UpdateTicket($options: TicketInput!, $id: Int!) {\n    updateTicket(options: $options, id: $id) {\n      id\n    }\n  }\n`;\n\n/**\n * __useUpdateTicketMutation__\n *\n * To run a mutation, you first call `useUpdateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTicketMutation, { data, loading, error }] = useUpdateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateTicketMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateTicketDocument, options);\n}\nexport const MeDocument = gql`\n  query Me {\n    me {\n      id\n      username\n      tickets {\n        id\n        title\n        description\n        status\n        priority\n      }\n      projects {\n        id\n        title\n        description\n      }\n    }\n  }\n`;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\nexport function useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\nexport const ProjectDocument = gql`\n  query Project($id: Int!) {\n    project(id: $id) {\n      title\n      id\n      description\n      tickets {\n        id\n        priority\n        title\n        status\n        description\n        users {\n          username\n        }\n      }\n      users {\n        id\n        username\n        email\n      }\n    }\n  }\n`;\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useProjectQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectDocument, options);\n}\nexport function useProjectLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectDocument, options);\n}\nexport const ProjectsDocument = gql`\n  query Projects {\n    projects {\n      description\n      id\n      tickets {\n        id\n        projectId\n      }\n      users {\n        id\n        username\n      }\n    }\n  }\n`;\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useProjectsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(ProjectsDocument, options);\n}\nexport function useProjectsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(ProjectsDocument, options);\n}\nexport const TicketDocument = gql`\n  query Ticket($id: Int!) {\n    ticket(id: $id) {\n      id\n      title\n      status\n      description\n      priority\n      createdAt\n      updatedAt\n      project {\n        title\n      }\n      users {\n        username\n      }\n    }\n  }\n`;\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useTicketQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(TicketDocument, options);\n}\nexport function useTicketLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(TicketDocument, options);\n}","map":{"version":3,"sources":["/Users/nicholasharvey/Desktop/programming/techChased/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","RegularErrorFragmentDoc","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","CreateProjectDocument","useCreateProjectMutation","baseOptions","options","useMutation","CreateTicketDocument","useCreateTicketMutation","DeleteProjectDocument","useDeleteProjectMutation","DeleteTicketDocument","useDeleteTicketMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","UpdateProjectDocument","useUpdateProjectMutation","UpdateTicketDocument","useUpdateTicketMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","ProjectDocument","useProjectQuery","useProjectLazyQuery","ProjectsDocument","useProjectsQuery","useProjectsLazyQuery","TicketDocument","useTicketQuery","useTicketLazyQuery"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AASA,MAAMC,cAAc,GAAG,EAAvB;AACA;;AAyUA,OAAO,MAAMC,uBAAuB,GAAGH,GAAI;AAC3C;AACA;AACA;AACA;AACA,CALO;AAMP,OAAO,MAAMI,sBAAsB,GAAGJ,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAkBP,OAAO,MAAMK,8BAA8B,GAAGL,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,uBAAwB;AAC5B,IAAIC,sBAAuB;AAC3B,CAXO;AAYP,OAAO,MAAME,qBAAqB,GAAGN,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,CANO;;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,wBAAT,CACLC,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAGLJ,qBAHK,EAGkBG,OAHlB,CAAP;AAID;AAUD,OAAO,MAAME,oBAAoB,GAAGX,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA,CANO;;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,uBAAT,CACLJ,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAGLC,oBAHK,EAGiBF,OAHjB,CAAP;AAID;AAUD,OAAO,MAAMI,qBAAqB,GAAGb,GAAI;AACzC;AACA;AACA;AACA,CAJO;;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASc,wBAAT,CACLN,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAGLG,qBAHK,EAGkBJ,OAHlB,CAAP;AAID;AAUD,OAAO,MAAMM,oBAAoB,GAAGf,GAAI;AACxC;AACA;AACA;AACA,CAJO;;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,uBAAT,CACLR,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAGLK,oBAHK,EAGiBN,OAHjB,CAAP;AAID;AAUD,OAAO,MAAMQ,aAAa,GAAGjB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,IAAIK,8BAA+B;AACnC,CAPO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,gBAAT,CACLV,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CACLO,aADK,EAELR,OAFK,CAAP;AAID;AAOD,OAAO,MAAMU,cAAc,GAAGnB,GAAI;AAClC;AACA;AACA;AACA,CAJO;;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoB,iBAAT,CACLZ,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CACLS,cADK,EAELV,OAFK,CAAP;AAID;AAOD,OAAO,MAAMY,gBAAgB,GAAGrB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,IAAIK,8BAA+B;AACnC,CAPO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,mBAAT,CACLd,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CACLW,gBADK,EAELZ,OAFK,CAAP;AAID;AAOD,OAAO,MAAMc,qBAAqB,GAAGvB,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,CANO;;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASwB,wBAAT,CACLhB,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAGLa,qBAHK,EAGkBd,OAHlB,CAAP;AAID;AAUD,OAAO,MAAMgB,oBAAoB,GAAGzB,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA,CANO;;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0B,uBAAT,CACLlB,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAACS,WAAP,CAGLe,oBAHK,EAGiBhB,OAHjB,CAAP;AAID;AAUD,OAAO,MAAMkB,UAAU,GAAG3B,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4B,UAAT,CACLpB,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC4B,QAAP,CAA2CF,UAA3C,EAAuDlB,OAAvD,CAAP;AACD;AACD,OAAO,SAASqB,cAAT,CACLtB,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,YAAP,CAA+CJ,UAA/C,EAA2DlB,OAA3D,CAAP;AACD;AAID,OAAO,MAAMuB,eAAe,GAAGhC,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvBO;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiC,eAAT,CACLzB,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC4B,QAAP,CACLG,eADK,EAELvB,OAFK,CAAP;AAID;AACD,OAAO,SAASyB,mBAAT,CACL1B,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,YAAP,CACLC,eADK,EAELvB,OAFK,CAAP;AAID;AAOD,OAAO,MAAM0B,gBAAgB,GAAGnC,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoC,gBAAT,CACL5B,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC4B,QAAP,CACLM,gBADK,EAEL1B,OAFK,CAAP;AAID;AACD,OAAO,SAAS4B,oBAAT,CACL7B,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,YAAP,CACLI,gBADK,EAEL1B,OAFK,CAAP;AAID;AASD,OAAO,MAAM6B,cAAc,GAAGtC,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuC,cAAT,CACL/B,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC4B,QAAP,CACLS,cADK,EAEL7B,OAFK,CAAP;AAID;AACD,OAAO,SAAS+B,kBAAT,CACLhC,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQP,cAAR,GAA2BM,WAA3B,CAAb;;AACA,SAAOP,MAAM,CAAC8B,YAAP,CACLO,cADK,EAEL7B,OAFK,CAAP;AAID","sourcesContent":["import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type FieldError = {\n  __typename?: \"FieldError\";\n  field: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n};\n\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars[\"Boolean\"];\n  createProject: Project;\n  deleteProject: Scalars[\"Boolean\"];\n  updateProject: Project;\n  createTicket?: Maybe<Ticket>;\n  deleteTicket: Scalars[\"Boolean\"];\n  updateTicket: Ticket;\n};\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\nexport type MutationLoginArgs = {\n  password: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n};\n\nexport type MutationCreateProjectArgs = {\n  options: ProjectInput;\n};\n\nexport type MutationDeleteProjectArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type MutationUpdateProjectArgs = {\n  options: ProjectInput;\n  id: Scalars[\"Int\"];\n};\n\nexport type MutationCreateTicketArgs = {\n  projectId: Scalars[\"Int\"];\n  options: TicketInput;\n};\n\nexport type MutationDeleteTicketArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type MutationUpdateTicketArgs = {\n  options: TicketInput;\n  id: Scalars[\"Int\"];\n};\n\nexport type Project = {\n  __typename?: \"Project\";\n  id: Scalars[\"Float\"];\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  users: Array<User>;\n  tickets: Array<Ticket>;\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n};\n\nexport type ProjectInput = {\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  me?: Maybe<User>;\n  projects: Array<Project>;\n  project: Project;\n  ticket: Ticket;\n  tickets: Array<Ticket>;\n};\n\nexport type QueryProjectArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type QueryTicketArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type Ticket = {\n  __typename?: \"Ticket\";\n  id: Scalars[\"Float\"];\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  status: Scalars[\"String\"];\n  priority: Scalars[\"String\"];\n  projectId: Scalars[\"Float\"];\n  project: Project;\n  users: Array<User>;\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n};\n\nexport type TicketInput = {\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  status: Scalars[\"String\"];\n  priority: Scalars[\"String\"];\n};\n\nexport type User = {\n  __typename?: \"User\";\n  id: Scalars[\"Float\"];\n  username: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n  projects?: Maybe<Array<Project>>;\n  tickets?: Maybe<Array<Ticket>>;\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n};\n\nexport type UserResponse = {\n  __typename?: \"UserResponse\";\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type UsernamePasswordInput = {\n  email: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n};\n\nexport type RegularErrorFragment = { __typename?: \"FieldError\" } & Pick<\n  FieldError,\n  \"field\" | \"message\"\n>;\n\nexport type RegularUserFragment = { __typename?: \"User\" } & Pick<\n  User,\n  \"id\" | \"username\"\n> & {\n    tickets?: Maybe<\n      Array<\n        { __typename?: \"Ticket\" } & Pick<\n          Ticket,\n          \"id\" | \"title\" | \"description\" | \"status\" | \"priority\"\n        >\n      >\n    >;\n    projects?: Maybe<\n      Array<\n        { __typename?: \"Project\" } & Pick<\n          Project,\n          \"id\" | \"title\" | \"description\"\n        >\n      >\n    >;\n  };\n\nexport type RegularUserResponseFragment = { __typename?: \"UserResponse\" } & {\n  errors?: Maybe<Array<{ __typename?: \"FieldError\" } & RegularErrorFragment>>;\n  user?: Maybe<{ __typename?: \"User\" } & RegularUserFragment>;\n};\n\nexport type CreateProjectMutationVariables = Exact<{\n  options: ProjectInput;\n}>;\n\nexport type CreateProjectMutation = { __typename?: \"Mutation\" } & {\n  createProject: { __typename?: \"Project\" } & Pick<Project, \"id\">;\n};\n\nexport type CreateTicketMutationVariables = Exact<{\n  options: TicketInput;\n  projectId: Scalars[\"Int\"];\n}>;\n\nexport type CreateTicketMutation = { __typename?: \"Mutation\" } & {\n  createTicket?: Maybe<{ __typename?: \"Ticket\" } & Pick<Ticket, \"id\">>;\n};\n\nexport type DeleteProjectMutationVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type DeleteProjectMutation = { __typename?: \"Mutation\" } & Pick<\n  Mutation,\n  \"deleteProject\"\n>;\n\nexport type DeleteTicketMutationVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type DeleteTicketMutation = { __typename?: \"Mutation\" } & Pick<\n  Mutation,\n  \"deleteTicket\"\n>;\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n}>;\n\nexport type LoginMutation = { __typename?: \"Mutation\" } & {\n  login: { __typename?: \"UserResponse\" } & RegularUserResponseFragment;\n};\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never }>;\n\nexport type LogoutMutation = { __typename?: \"Mutation\" } & Pick<\n  Mutation,\n  \"logout\"\n>;\n\nexport type RegisterMutationVariables = Exact<{\n  options: UsernamePasswordInput;\n}>;\n\nexport type RegisterMutation = { __typename?: \"Mutation\" } & {\n  register: { __typename?: \"UserResponse\" } & RegularUserResponseFragment;\n};\n\nexport type UpdateProjectMutationVariables = Exact<{\n  options: ProjectInput;\n  id: Scalars[\"Int\"];\n}>;\n\nexport type UpdateProjectMutation = { __typename?: \"Mutation\" } & {\n  updateProject: { __typename?: \"Project\" } & Pick<Project, \"id\">;\n};\n\nexport type UpdateTicketMutationVariables = Exact<{\n  options: TicketInput;\n  id: Scalars[\"Int\"];\n}>;\n\nexport type UpdateTicketMutation = { __typename?: \"Mutation\" } & {\n  updateTicket: { __typename?: \"Ticket\" } & Pick<Ticket, \"id\">;\n};\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MeQuery = { __typename?: \"Query\" } & {\n  me?: Maybe<\n    { __typename?: \"User\" } & Pick<User, \"id\" | \"username\"> & {\n        tickets?: Maybe<\n          Array<\n            { __typename?: \"Ticket\" } & Pick<\n              Ticket,\n              \"id\" | \"title\" | \"description\" | \"status\" | \"priority\"\n            >\n          >\n        >;\n        projects?: Maybe<\n          Array<\n            { __typename?: \"Project\" } & Pick<\n              Project,\n              \"id\" | \"title\" | \"description\"\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport type ProjectQueryVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type ProjectQuery = { __typename?: \"Query\" } & {\n  project: { __typename?: \"Project\" } & Pick<\n    Project,\n    \"title\" | \"id\" | \"description\"\n  > & {\n      tickets: Array<\n        { __typename?: \"Ticket\" } & Pick<\n          Ticket,\n          \"id\" | \"priority\" | \"title\" | \"status\" | \"description\"\n        > & { users: Array<{ __typename?: \"User\" } & Pick<User, \"username\">> }\n      >;\n      users: Array<\n        { __typename?: \"User\" } & Pick<User, \"id\" | \"username\" | \"email\">\n      >;\n    };\n};\n\nexport type ProjectsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type ProjectsQuery = { __typename?: \"Query\" } & {\n  projects: Array<\n    { __typename?: \"Project\" } & Pick<Project, \"description\" | \"id\"> & {\n        tickets: Array<\n          { __typename?: \"Ticket\" } & Pick<Ticket, \"id\" | \"projectId\">\n        >;\n        users: Array<{ __typename?: \"User\" } & Pick<User, \"id\" | \"username\">>;\n      }\n  >;\n};\n\nexport type TicketQueryVariables = Exact<{\n  id: Scalars[\"Int\"];\n}>;\n\nexport type TicketQuery = { __typename?: \"Query\" } & {\n  ticket: { __typename?: \"Ticket\" } & Pick<\n    Ticket,\n    | \"id\"\n    | \"title\"\n    | \"status\"\n    | \"description\"\n    | \"priority\"\n    | \"createdAt\"\n    | \"updatedAt\"\n  > & {\n      project: { __typename?: \"Project\" } & Pick<Project, \"title\">;\n      users: Array<{ __typename?: \"User\" } & Pick<User, \"username\">>;\n    };\n};\n\nexport const RegularErrorFragmentDoc = gql`\n  fragment RegularError on FieldError {\n    field\n    message\n  }\n`;\nexport const RegularUserFragmentDoc = gql`\n  fragment RegularUser on User {\n    id\n    username\n    tickets {\n      id\n      title\n      description\n      status\n      priority\n    }\n    projects {\n      id\n      title\n      description\n    }\n  }\n`;\nexport const RegularUserResponseFragmentDoc = gql`\n  fragment RegularUserResponse on UserResponse {\n    errors {\n      ...RegularError\n    }\n    user {\n      ...RegularUser\n    }\n  }\n  ${RegularErrorFragmentDoc}\n  ${RegularUserFragmentDoc}\n`;\nexport const CreateProjectDocument = gql`\n  mutation CreateProject($options: ProjectInput!) {\n    createProject(options: $options) {\n      id\n    }\n  }\n`;\nexport type CreateProjectMutationFn = Apollo.MutationFunction<\n  CreateProjectMutation,\n  CreateProjectMutationVariables\n>;\n\n/**\n * __useCreateProjectMutation__\n *\n * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateProjectMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateProjectMutation,\n    CreateProjectMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    CreateProjectMutation,\n    CreateProjectMutationVariables\n  >(CreateProjectDocument, options);\n}\nexport type CreateProjectMutationHookResult = ReturnType<\n  typeof useCreateProjectMutation\n>;\nexport type CreateProjectMutationResult =\n  Apollo.MutationResult<CreateProjectMutation>;\nexport type CreateProjectMutationOptions = Apollo.BaseMutationOptions<\n  CreateProjectMutation,\n  CreateProjectMutationVariables\n>;\nexport const CreateTicketDocument = gql`\n  mutation CreateTicket($options: TicketInput!, $projectId: Int!) {\n    createTicket(options: $options, projectId: $projectId) {\n      id\n    }\n  }\n`;\nexport type CreateTicketMutationFn = Apollo.MutationFunction<\n  CreateTicketMutation,\n  CreateTicketMutationVariables\n>;\n\n/**\n * __useCreateTicketMutation__\n *\n * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useCreateTicketMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateTicketMutation,\n    CreateTicketMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    CreateTicketMutation,\n    CreateTicketMutationVariables\n  >(CreateTicketDocument, options);\n}\nexport type CreateTicketMutationHookResult = ReturnType<\n  typeof useCreateTicketMutation\n>;\nexport type CreateTicketMutationResult =\n  Apollo.MutationResult<CreateTicketMutation>;\nexport type CreateTicketMutationOptions = Apollo.BaseMutationOptions<\n  CreateTicketMutation,\n  CreateTicketMutationVariables\n>;\nexport const DeleteProjectDocument = gql`\n  mutation DeleteProject($id: Int!) {\n    deleteProject(id: $id)\n  }\n`;\nexport type DeleteProjectMutationFn = Apollo.MutationFunction<\n  DeleteProjectMutation,\n  DeleteProjectMutationVariables\n>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteProjectMutation,\n    DeleteProjectMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    DeleteProjectMutation,\n    DeleteProjectMutationVariables\n  >(DeleteProjectDocument, options);\n}\nexport type DeleteProjectMutationHookResult = ReturnType<\n  typeof useDeleteProjectMutation\n>;\nexport type DeleteProjectMutationResult =\n  Apollo.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = Apollo.BaseMutationOptions<\n  DeleteProjectMutation,\n  DeleteProjectMutationVariables\n>;\nexport const DeleteTicketDocument = gql`\n  mutation DeleteTicket($id: Int!) {\n    deleteTicket(id: $id)\n  }\n`;\nexport type DeleteTicketMutationFn = Apollo.MutationFunction<\n  DeleteTicketMutation,\n  DeleteTicketMutationVariables\n>;\n\n/**\n * __useDeleteTicketMutation__\n *\n * To run a mutation, you first call `useDeleteTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTicketMutation, { data, loading, error }] = useDeleteTicketMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTicketMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteTicketMutation,\n    DeleteTicketMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    DeleteTicketMutation,\n    DeleteTicketMutationVariables\n  >(DeleteTicketDocument, options);\n}\nexport type DeleteTicketMutationHookResult = ReturnType<\n  typeof useDeleteTicketMutation\n>;\nexport type DeleteTicketMutationResult =\n  Apollo.MutationResult<DeleteTicketMutation>;\nexport type DeleteTicketMutationOptions = Apollo.BaseMutationOptions<\n  DeleteTicketMutation,\n  DeleteTicketMutationVariables\n>;\nexport const LoginDocument = gql`\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      ...RegularUserResponse\n    }\n  }\n  ${RegularUserResponseFragmentDoc}\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    options\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const LogoutDocument = gql`\n  mutation Logout {\n    logout\n  }\n`;\nexport type LogoutMutationFn = Apollo.MutationFunction<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LogoutMutation,\n    LogoutMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(\n    LogoutDocument,\n    options\n  );\n}\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<\n  LogoutMutation,\n  LogoutMutationVariables\n>;\nexport const RegisterDocument = gql`\n  mutation Register($options: UsernamePasswordInput!) {\n    register(options: $options) {\n      ...RegularUserResponse\n    }\n  }\n  ${RegularUserResponseFragmentDoc}\n`;\nexport type RegisterMutationFn = Apollo.MutationFunction<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RegisterMutation,\n    RegisterMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(\n    RegisterDocument,\n    options\n  );\n}\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\nexport const UpdateProjectDocument = gql`\n  mutation UpdateProject($options: ProjectInput!, $id: Int!) {\n    updateProject(options: $options, id: $id) {\n      id\n    }\n  }\n`;\nexport type UpdateProjectMutationFn = Apollo.MutationFunction<\n  UpdateProjectMutation,\n  UpdateProjectMutationVariables\n>;\n\n/**\n * __useUpdateProjectMutation__\n *\n * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateProjectMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateProjectMutation,\n    UpdateProjectMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    UpdateProjectMutation,\n    UpdateProjectMutationVariables\n  >(UpdateProjectDocument, options);\n}\nexport type UpdateProjectMutationHookResult = ReturnType<\n  typeof useUpdateProjectMutation\n>;\nexport type UpdateProjectMutationResult =\n  Apollo.MutationResult<UpdateProjectMutation>;\nexport type UpdateProjectMutationOptions = Apollo.BaseMutationOptions<\n  UpdateProjectMutation,\n  UpdateProjectMutationVariables\n>;\nexport const UpdateTicketDocument = gql`\n  mutation UpdateTicket($options: TicketInput!, $id: Int!) {\n    updateTicket(options: $options, id: $id) {\n      id\n    }\n  }\n`;\nexport type UpdateTicketMutationFn = Apollo.MutationFunction<\n  UpdateTicketMutation,\n  UpdateTicketMutationVariables\n>;\n\n/**\n * __useUpdateTicketMutation__\n *\n * To run a mutation, you first call `useUpdateTicketMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTicketMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTicketMutation, { data, loading, error }] = useUpdateTicketMutation({\n *   variables: {\n *      options: // value for 'options'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateTicketMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateTicketMutation,\n    UpdateTicketMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    UpdateTicketMutation,\n    UpdateTicketMutationVariables\n  >(UpdateTicketDocument, options);\n}\nexport type UpdateTicketMutationHookResult = ReturnType<\n  typeof useUpdateTicketMutation\n>;\nexport type UpdateTicketMutationResult =\n  Apollo.MutationResult<UpdateTicketMutation>;\nexport type UpdateTicketMutationOptions = Apollo.BaseMutationOptions<\n  UpdateTicketMutation,\n  UpdateTicketMutationVariables\n>;\nexport const MeDocument = gql`\n  query Me {\n    me {\n      id\n      username\n      tickets {\n        id\n        title\n        description\n        status\n        priority\n      }\n      projects {\n        id\n        title\n        description\n      }\n    }\n  }\n`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const ProjectDocument = gql`\n  query Project($id: Int!) {\n    project(id: $id) {\n      title\n      id\n      description\n      tickets {\n        id\n        priority\n        title\n        status\n        description\n        users {\n          username\n        }\n      }\n      users {\n        id\n        username\n        email\n      }\n    }\n  }\n`;\n\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProjectQuery(\n  baseOptions: Apollo.QueryHookOptions<ProjectQuery, ProjectQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ProjectQuery, ProjectQueryVariables>(\n    ProjectDocument,\n    options\n  );\n}\nexport function useProjectLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ProjectQuery, ProjectQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ProjectQuery, ProjectQueryVariables>(\n    ProjectDocument,\n    options\n  );\n}\nexport type ProjectQueryHookResult = ReturnType<typeof useProjectQuery>;\nexport type ProjectLazyQueryHookResult = ReturnType<typeof useProjectLazyQuery>;\nexport type ProjectQueryResult = Apollo.QueryResult<\n  ProjectQuery,\n  ProjectQueryVariables\n>;\nexport const ProjectsDocument = gql`\n  query Projects {\n    projects {\n      description\n      id\n      tickets {\n        id\n        projectId\n      }\n      users {\n        id\n        username\n      }\n    }\n  }\n`;\n\n/**\n * __useProjectsQuery__\n *\n * To run a query within a React component, call `useProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProjectsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ProjectsQuery, ProjectsQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ProjectsQuery, ProjectsQueryVariables>(\n    ProjectsDocument,\n    options\n  );\n}\nexport function useProjectsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ProjectsQuery,\n    ProjectsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ProjectsQuery, ProjectsQueryVariables>(\n    ProjectsDocument,\n    options\n  );\n}\nexport type ProjectsQueryHookResult = ReturnType<typeof useProjectsQuery>;\nexport type ProjectsLazyQueryHookResult = ReturnType<\n  typeof useProjectsLazyQuery\n>;\nexport type ProjectsQueryResult = Apollo.QueryResult<\n  ProjectsQuery,\n  ProjectsQueryVariables\n>;\nexport const TicketDocument = gql`\n  query Ticket($id: Int!) {\n    ticket(id: $id) {\n      id\n      title\n      status\n      description\n      priority\n      createdAt\n      updatedAt\n      project {\n        title\n      }\n      users {\n        username\n      }\n    }\n  }\n`;\n\n/**\n * __useTicketQuery__\n *\n * To run a query within a React component, call `useTicketQuery` and pass it any options that fit your needs.\n * When your component renders, `useTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTicketQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTicketQuery(\n  baseOptions: Apollo.QueryHookOptions<TicketQuery, TicketQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<TicketQuery, TicketQueryVariables>(\n    TicketDocument,\n    options\n  );\n}\nexport function useTicketLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<TicketQuery, TicketQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<TicketQuery, TicketQueryVariables>(\n    TicketDocument,\n    options\n  );\n}\nexport type TicketQueryHookResult = ReturnType<typeof useTicketQuery>;\nexport type TicketLazyQueryHookResult = ReturnType<typeof useTicketLazyQuery>;\nexport type TicketQueryResult = Apollo.QueryResult<\n  TicketQuery,\n  TicketQueryVariables\n>;\n"]},"metadata":{},"sourceType":"module"}